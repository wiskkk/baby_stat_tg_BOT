import asyncio
import logging
import os
from datetime import datetime, time, timedelta

import aiocron
import pytz
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from dotenv import load_dotenv
from sqlalchemy import func
from sqlalchemy.future import select

from bot_core.statistics import collect_full_daily_statistics
from db.database import get_db
from db.models import FeedingRecord, SleepRecord, User

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")

if not BOT_TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BOT_TOKEN –≤ .env")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot: Bot = Bot(token=BOT_TOKEN)
dp: Dispatcher = Dispatcher()

TZ = pytz.timezone("Europe/Moscow")


async def send_daily_statistics(user_id: int):
    today_msk = datetime.now(TZ)
    stats = await collect_full_daily_statistics(user_id, today_msk)

    message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}:\n\n"
        f"üçº –ü–∏—Ç–∞–Ω–∏–µ:\n"
        f"‚Äî –î–Ω–µ–º: {stats['feeding']['day_ml']} –º–ª\n"
        f"‚Äî –ù–æ—á—å—é: {stats['feeding']['night_ml']} –º–ª\n"
        f"‚Äî –í—Å–µ–≥–æ: {stats['feeding']['total_ml']} –º–ª\n\n"
        f"üò¥ –°–æ–Ω:\n"
        f"‚Äî –î–Ω–µ–º: {stats['sleep']['day_minutes']} –º–∏–Ω\n"
        f"‚Äî –ù–æ—á—å—é: {stats['sleep']['night_minutes']} –º–∏–Ω\n"
        f"‚Äî –í—Å–µ–≥–æ: {stats['sleep']['total_minutes']} –º–∏–Ω"
    )

    await bot.send_message(chat_id=user_id, text=message)

# –£—Å—Ç–∞–Ω–æ–≤–∏–º cron-–∑–∞–¥–∞—á—É –Ω–∞ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ
aiocron.crontab('0 0 * * *', func=send_daily_statistics, tz=TZ)


class SleepTimeState(StatesGroup):
    waiting_for_time = State()
    waiting_for_end_time = State()


class ManualSleepStartState(StatesGroup):
    waiting_for_time = State()
    waiting_for_date_choice = State()


class ManualEndSleepState(StatesGroup):
    waiting_for_time = State()
    waiting_for_date_choice = State()


date_choice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"),
         KeyboardButton(text="–í—á–µ—Ä–∞")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–Ω"), KeyboardButton(text="–ü–∏—Ç–∞–Ω–∏–µ")],
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–Ω–∞
sleep_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
         KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–Ω–∞
sleep_actions_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω"),
         KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω –≤—Ä—É—á–Ω—É—é")],
        [KeyboardButton(text="–ü–∏—Ç–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è
feed_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start_handler(message: Message) -> None:
    telegram_id = message.from_user.id
    name = message.from_user.full_name

    async for session in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(telegram_id=telegram_id, name=name)
            session.add(new_user)
            await session.commit()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


@dp.message(lambda message: message.text == "–°–æ–Ω")
async def ask_sleep_time(message: Message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    now = datetime.now(TZ).strftime("%H:%M")
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {now}\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è' –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=sleep_keyboard
    )


@dp.message(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_sleep_time(message: Message):
    """–§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏."""
    telegram_id = message.from_user.id
    now = datetime.now(TZ)

    async for db_session in get_db():
        result = await db_session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–Ω–µ
        sleep_record = SleepRecord(
            user_telegram_id=user.telegram_id, start_time=now.astimezone(pytz.utc))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTC
        db_session.add(sleep_record)
        await db_session.commit()

    await message.answer(
        "–°–æ–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω! –ö–æ–≥–¥–∞ –º–∞–ª—ã—à –ø—Ä–æ—Å–Ω–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω'.\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞.",
        reply_markup=sleep_actions_keyboard  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


@dp.message(lambda message: message.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
async def change_sleep_time(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
    await state.set_state(ManualSleepStartState.waiting_for_time)


@dp.message(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω –≤—Ä—É—á–Ω—É—é")
async def manual_wake_up_start(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞ –≤—Ä—É—á–Ω—É—é."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
    await state.set_state(ManualEndSleepState.waiting_for_time)


@dp.message(ManualSleepStartState.waiting_for_time)
async def manual_sleep_time_input(message: Message, state: FSMContext):
    try:
        custom_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(custom_time=custom_time)
        await state.set_state(ManualSleepStartState.waiting_for_date_choice)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–Ω–∞:", reply_markup=date_choice_keyboard)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@dp.message(ManualEndSleepState.waiting_for_time)
async def manual_wake_up_time_input(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É."""
    try:
        custom_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(custom_time=custom_time)
        await state.set_state(ManualEndSleepState.waiting_for_date_choice)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=date_choice_keyboard)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@dp.message(ManualSleepStartState.waiting_for_date_choice)
async def manual_sleep_date_choice(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    data = await state.get_data()

    if message.text not in ["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–í—á–µ—Ä–∞'.")
        return

    chosen_date = datetime.today().date()
    if message.text == "–í—á–µ—Ä–∞":
        chosen_date -= timedelta(days=1)

    custom_datetime = datetime.combine(chosen_date, data["custom_time"])
    custom_datetime = TZ.localize(custom_datetime).astimezone(pytz.utc)

    async for db_session in get_db():
        result = await db_session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
            await state.clear()
            return

        sleep_record = SleepRecord(
            user_telegram_id=user.telegram_id,
            start_time=custom_datetime
        )
        db_session.add(sleep_record)
        await db_session.commit()

        await message.answer("–°–æ–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!")
        await message.answer("–ö–æ–≥–¥–∞ –º–∞–ª—ã—à –ø—Ä–æ—Å–Ω–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω'.", reply_markup=sleep_actions_keyboard)

    await state.clear()


@dp.message(ManualEndSleepState.waiting_for_date_choice)
async def manual_wake_up_date_choice(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    data = await state.get_data()

    if message.text not in ["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–í—á–µ—Ä–∞'.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º
    chosen_date = datetime.today().date()
    if message.text == "–í—á–µ—Ä–∞":
        chosen_date = chosen_date - timedelta(days=1)

    combined_datetime = datetime.combine(chosen_date, data["custom_time"])
    combined_datetime = TZ.localize(combined_datetime).astimezone(pytz.utc)

    async for db_session in get_db():
        result = await db_session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalars().first()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
            await state.clear()
            return

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–Ω
        result = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == telegram_id, SleepRecord.end_time.is_(None))
            .order_by(SleepRecord.start_time.desc())
        )
        sleep_record = result.scalars().first()

        if not sleep_record:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–Ω–∞.")
            await state.clear()
            return

        if sleep_record.start_time > combined_datetime:
            await message.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞!")
            await state.clear()
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–Ω–∞
        sleep_record.end_time = combined_datetime
        await db_session.commit()

        duration = ((sleep_record.end_time -
                    sleep_record.start_time).seconds) // 60
        await message.answer(f"–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç.", reply_markup=main_keyboard)

    await state.clear()


@dp.message(SleepTimeState.waiting_for_time)
async def manual_sleep_time(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞."""
    telegram_id = message.from_user.id
    try:
        custom_time = datetime.strptime(message.text, "%H:%M").time()
        custom_datetime = datetime.combine(datetime.today(), custom_time)
        custom_datetime = TZ.localize(
            custom_datetime)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

        async for db_session in get_db():  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            result = await db_session.execute(select(User).where(User.telegram_id == telegram_id))
            user = result.scalars().first()

            if not user:
                await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
                return

            sleep_record = SleepRecord(
                user_telegram_id=user.telegram_id, start_time=custom_datetime.astimezone(pytz.utc))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTC
            db_session.add(sleep_record)
            await db_session.commit()

        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("–°–æ–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!")
        await message.answer("–ö–æ–≥–¥–∞ –º–∞–ª—ã—à –ø—Ä–æ—Å–Ω–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω'.", reply_markup=sleep_actions_keyboard)
    except ValueError as error:
        await message.answer(f"–û—à–∏–±–∫–∞ {error}! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@dp.message(SleepTimeState.waiting_for_end_time)
async def manual_end_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    telegram_id = message.from_user.id
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –ª–æ–∫–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        custom_time = datetime.strptime(message.text, "%H:%M").time()
        custom_datetime = datetime.combine(datetime.today(), custom_time)
        custom_datetime = TZ.localize(
            custom_datetime)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

        async for db_session in get_db():
            result = await db_session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalars().first()

            if not user:
                await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
                return

            result = await db_session.execute(
                select(SleepRecord)
                .where(SleepRecord.user_telegram_id == user.telegram_id, SleepRecord.end_time.is_(None))
                .order_by(SleepRecord.start_time.desc())
            )
            last_sleep = result.scalars().first()

            if not last_sleep:
                await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–Ω' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.")
                return

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º start_time –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ end_time (–æ–±–µ –≤ UTC)
            custom_utc = custom_datetime.astimezone(pytz.utc)

            if custom_utc <= last_sleep.start_time:
                start_local = last_sleep.start_time.astimezone(
                    TZ).strftime("%H:%M")
                await message.answer(
                    f"–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞ ({start_local}).\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è."
                )
                return

            last_sleep.end_time = custom_utc
            await db_session.commit()

            duration = (last_sleep.end_time -
                        last_sleep.start_time).total_seconds() // 60
            await message.answer(f"–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–∞–ª—ã—à–∫–∞ —Å–ø–∞–ª–∞ {int(duration)} –º–∏–Ω—É—Ç.")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

        await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@dp.message(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–Ω")
async def wake_up_button(message: Message):
    """–§–∏–∫—Å–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."""
    telegram_id = message.from_user.id
    now_msk = datetime.now(TZ)
    now_utc = now_msk.astimezone(pytz.utc)

    async for db_session in get_db():
        result = await db_session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalars().first()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
            return

        result = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == user.telegram_id, SleepRecord.end_time.is_(None))
            .order_by(SleepRecord.start_time.desc())
        )
        last_sleep = result.scalars().first()

        if not last_sleep:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–Ω' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.")
            return

        last_sleep.end_time = now_utc
        await db_session.commit()

        duration = (last_sleep.end_time -
                    last_sleep.start_time).total_seconds() // 60
        await message.answer(f"–°–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–∞–ª—ã—à —Å–ø–∞–ª {int(duration)} –º–∏–Ω—É—Ç.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


@dp.message(lambda message: message.text == "–ü–∏—Ç–∞–Ω–∏–µ")
async def ask_feed_amount(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—ä–µ–º –º–æ–ª–æ–∫–∞, –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∫ —Å–Ω—É, –Ω–æ –º–µ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ —Å–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω."""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤—ã–ø–∏—Ç–æ–≥–æ –º–æ–ª–æ–∫–∞ –≤ –º–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120).",
        reply_markup=feed_keyboard
    )


@dp.message(lambda message: message.text.isdigit())
async def save_feed_amount(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–Ω—É."""
    telegram_id = message.from_user.id
    feed_amount = int(message.text)

    async for db_session in get_db():
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–∞
        feed_record = FeedingRecord(
            user_telegram_id=telegram_id, amount=feed_amount)
        db_session.add(feed_record)
        await db_session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Å–æ–Ω
        result = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == telegram_id, SleepRecord.end_time.is_(None))
        )
        active_sleep = result.scalars().first()

    reply_markup = sleep_actions_keyboard if active_sleep else main_keyboard

    await message.answer(
        f"–û–±—ä–µ–º –ø–∏—Ç–∞–Ω–∏—è: {feed_amount} –º–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        reply_markup=reply_markup
    )


@dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_feed(message: Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –º–æ–ª–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    )


@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def send_stats_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü."""
    telegram_id = message.from_user.id
    today = datetime.now(TZ).date()

    # –ì—Ä–∞–Ω–∏—Ü—ã –¥–Ω–µ–π
    day_start = datetime.combine(today, time(6, 0)).astimezone(TZ)
    day_end = datetime.combine(today, time(22, 0)).astimezone(TZ)

    # –ì—Ä–∞–Ω–∏—Ü—ã –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞
    week_start = today - timedelta(days=7)
    month_start = today - timedelta(days=30)

    async for db_session in get_db():
        # === –ü–ò–¢–ê–ù–ò–ï –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===
        feeds_today = await db_session.execute(
            select(FeedingRecord)
            .where(FeedingRecord.user_telegram_id == telegram_id,
                   func.date(FeedingRecord.timestamp) == today)
        )
        feeds = feeds_today.scalars().all()
        day_feed = sum(f.amount for f in feeds if day_start <=
                       f.timestamp.astimezone(TZ) <= day_end)
        night_feed = sum(f.amount for f in feeds if not (
            day_start <= f.timestamp.astimezone(TZ) <= day_end))

        # === –°–û–ù –∑–∞ —Å–µ–≥–æ–¥–Ω—è ===
        sleeps_today = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == telegram_id,
                   SleepRecord.end_time.isnot(None),
                   func.date(SleepRecord.end_time) == today)
        )
        sleeps = sleeps_today.scalars().all()

        day_sleep = 0
        night_sleep = 0
        for s in sleeps:
            end_msk = s.end_time.astimezone(TZ)
            duration = int((s.end_time - s.start_time).total_seconds() // 60)
            if day_start <= end_msk <= day_end:
                day_sleep += duration
            else:
                night_sleep += duration

        # === –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü ===
        feeds_week = await db_session.execute(
            select(func.sum(FeedingRecord.amount))
            .where(FeedingRecord.user_telegram_id == telegram_id,
                   FeedingRecord.timestamp >= week_start)
        )
        week_feed = feeds_week.scalar() or 0

        feeds_month = await db_session.execute(
            select(func.sum(FeedingRecord.amount))
            .where(FeedingRecord.user_telegram_id == telegram_id,
                   FeedingRecord.timestamp >= month_start)
        )
        month_feed = feeds_month.scalar() or 0

        # === –°–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü ===
        sleeps_week = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == telegram_id,
                   SleepRecord.end_time.isnot(None),
                   SleepRecord.end_time >= week_start)
        )
        week_sleeps = sleeps_week.scalars().all()
        week_sleep_minutes = sum(
            int((s.end_time - s.start_time).total_seconds() // 60) for s in week_sleeps)

        sleeps_month = await db_session.execute(
            select(SleepRecord)
            .where(SleepRecord.user_telegram_id == telegram_id,
                   SleepRecord.end_time.isnot(None),
                   SleepRecord.end_time >= month_start)
        )
        month_sleeps = sleeps_month.scalars().all()
        month_sleep_minutes = sum(
            int((s.end_time - s.start_time).total_seconds() // 60) for s in month_sleeps)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}:</b>\n"
        f"ü•õ –ü–∏—Ç–∞–Ω–∏–µ: –î–µ–Ω—å ‚Äî {day_feed} –º–ª, –ù–æ—á—å ‚Äî {night_feed} –º–ª\n"
        f"üò¥ –°–æ–Ω: –î–µ–Ω—å ‚Äî {day_sleep} –º–∏–Ω, –ù–æ—á—å ‚Äî {night_sleep} –º–∏–Ω\n\n"
        f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:\n"
        f"ü•õ –ü–∏—Ç–∞–Ω–∏–µ: {week_feed} –º–ª | üò¥ –°–æ–Ω: {week_sleep_minutes} –º–∏–Ω\n"
        f"üìÖ –ó–∞ –º–µ—Å—è—Ü:\n"
        f"ü•õ –ü–∏—Ç–∞–Ω–∏–µ: {month_feed} –º–ª | üò¥ –°–æ–Ω: {month_sleep_minutes} –º–∏–Ω"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=main_keyboard)


async def on_startup() -> None:
    """–§—É–Ω–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await on_startup()  # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
