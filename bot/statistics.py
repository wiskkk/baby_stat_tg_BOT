from datetime import datetime, time, timedelta

import pytz
from sqlalchemy.future import select

from bot.bot import bot
from db.database import get_db
from db.models import FeedingRecord, SleepRecord

TZ = pytz.timezone("Europe/Moscow")


async def collect_daily_feeding_statistics(user_id: int, date: datetime) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.

    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param date: –î–∞—Ç–∞ –≤ –ú–°–ö
    :return: –°–ª–æ–≤–∞—Ä—å —Å –æ–±—ä–µ–º–æ–º –ø–∏—Ç–∞–Ω–∏—è –¥–Ω–µ–º –∏ –Ω–æ—á—å—é
    """
    # –ì—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ –≤ –ú–°–ö
    start_of_day_msk = datetime.combine(date.date(), time(0, 0))
    end_of_day_msk = start_of_day_msk + timedelta(days=1)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
    start_of_day_utc = TZ.localize(start_of_day_msk).astimezone(pytz.utc)
    end_of_day_utc = TZ.localize(end_of_day_msk).astimezone(pytz.utc)

    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏
        result = await session.execute(
            select(FeedingRecord)
            .where(
                FeedingRecord.user_telegram_id == user_id,
                FeedingRecord.timestamp >= start_of_day_utc,
                FeedingRecord.timestamp < end_of_day_utc
            )
        )
        feeding_records = result.scalars().all()

    day_ml = 0
    night_ml = 0

    for record in feeding_records:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –ú–°–ö
        record_time_msk = record.timestamp.astimezone(TZ)
        hour = record_time_msk.hour

        # –ù–æ—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: —Å 22:00 –¥–æ 05:59
        if hour >= 22 or hour < 6:
            night_ml += record.amount
        else:
            day_ml += record.amount

    return {
        "date": date.strftime("%d.%m.%Y"),
        "feeding": {
            "day_ml": day_ml,
            "night_ml": night_ml,
            "total_ml": day_ml + night_ml
        }
    }


async def collect_daily_sleep_statistics(user_id: int, date: datetime) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–Ω—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.

    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param date: –î–∞—Ç–∞ –≤ –ú–°–ö
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–Ω–∞ –¥–Ω–µ–º –∏ –Ω–æ—á—å—é (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    """
    # –ì—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ –≤ –ú–°–ö
    start_of_day_msk = datetime.combine(date.date(), time(0, 0))
    end_of_day_msk = start_of_day_msk + timedelta(days=1)

    start_of_day_utc = TZ.localize(start_of_day_msk).astimezone(pytz.utc)
    end_of_day_utc = TZ.localize(end_of_day_msk).astimezone(pytz.utc)

    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        result = await session.execute(
            select(SleepRecord)
            .where(
                SleepRecord.user_telegram_id == user_id,
                SleepRecord.end_time >= start_of_day_utc,
                SleepRecord.end_time < end_of_day_utc
            )
        )
        sleep_records = result.scalars().all()

    day_sleep_minutes = 0
    night_sleep_minutes = 0

    for record in sleep_records:
        if not record.start_time or not record.end_time:
            continue

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –ú–°–ö
        end_time_msk = record.end_time.astimezone(TZ)
        hour = end_time_msk.hour

        duration = int(
            (record.end_time - record.start_time).total_seconds() // 60)

        if 22 <= hour or hour < 6:
            night_sleep_minutes += duration
        else:
            day_sleep_minutes += duration

    return {
        "sleep": {
            "day_minutes": day_sleep_minutes,
            "night_minutes": night_sleep_minutes,
            "total_minutes": day_sleep_minutes + night_sleep_minutes
        }
    }


async def collect_full_daily_statistics(user_id: int, date: datetime) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Å–Ω—É –∑–∞ –¥–µ–Ω—å.

    :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param date: –î–∞—Ç–∞ –≤ –ú–°–ö
    :return: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –∏—Ç–æ–≥–∞–º–∏
    """
    feeding_stats = await collect_daily_feeding_statistics(user_id, date)
    sleep_stats = await collect_daily_sleep_statistics(user_id, date)

    full_stats = {
        "date": feeding_stats["date"],
        "feeding": feeding_stats["feeding"],
        "sleep": sleep_stats["sleep"]
    }
    return full_stats


async def send_daily_statistics(user_id: int):
    today_msk = datetime.now(TZ)
    stats = await collect_full_daily_statistics(user_id, today_msk)

    message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}:\n\n"
        f"üçº –ü–∏—Ç–∞–Ω–∏–µ:\n"
        f"‚Äî –î–Ω–µ–º: {stats['feeding']['day_ml']} –º–ª\n"
        f"‚Äî –ù–æ—á—å—é: {stats['feeding']['night_ml']} –º–ª\n"
        f"‚Äî –í—Å–µ–≥–æ: {stats['feeding']['total_ml']} –º–ª\n\n"
        f"üò¥ –°–æ–Ω:\n"
        f"‚Äî –î–Ω–µ–º: {stats['sleep']['day_minutes']} –º–∏–Ω\n"
        f"‚Äî –ù–æ—á—å—é: {stats['sleep']['night_minutes']} –º–∏–Ω\n"
        f"‚Äî –í—Å–µ–≥–æ: {stats['sleep']['total_minutes']} –º–∏–Ω"
    )

    await bot.send_message(chat_id=user_id, text=message)
